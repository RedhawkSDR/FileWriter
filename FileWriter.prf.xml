<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 This file is protected by Copyright. Please refer to the COPYRIGHT file
 distributed with this source distribution.
 
 This file is part of REDHAWK Basic Components FileWriter.
 
 REDHAWK Basic Components FileWriter is free software: you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published by the
 Free Software Foundation, either version 3 of the License, or (at your
 option) any later version.
 
 REDHAWK Basic Components FileWriter is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 for more details.
 
 You should have received a copy of the GNU Lesser General Public License
 along with this program.  If not, see http://www.gnu.org/licenses/.
-->
<!DOCTYPE properties PUBLIC "-//JTRS//DTD SCA V2.2.2 PRF//EN" "properties.dtd">
<properties>
  <simple id="destination_uri" mode="readwrite" name="destination_uri" type="string">
    <description>The path to the file to be written.

URI accepted prefixes:
file://	Local Filesystem
sca:// 	SCA Filesystem (path relative to SDRROOT/dom)</description>
    <value>sca:///data/%STREAMID%.%TIMESTAMP%.%MODE%.%SR%.%DT%</value>
    <kind kindtype="property"/>
    <action type="external"/>
  </simple>
  <simple id="destination_uri_suffix" mode="readwrite" name="destination_uri_suffix" type="string">
    <description>An optional prefix to be appended to the destination_uri.</description>
    <value></value>
    <kind kindtype="property"/>
    <action type="external"/>
  </simple>
  <simple id="file_format" mode="readwrite" name="file_format" type="string">
    <description>The format of the data to be written to the file.</description>
    <value>RAW</value>
    <enumerations>
      <enumeration label="BLUE/PLATINUM FILE" value="BLUEFILE"/>
      <enumeration label="RAW (BULKIO)" value="RAW"/>
    </enumerations>
    <kind kindtype="property"/>
    <action type="external"/>
  </simple>
  <simple id="swap_bytes" mode="readwrite" name="swap_bytes" type="boolean">
    <description>When true, the endianness of the data will be switched from the local machine's representation.  For example, on an x86 machine, the native endianness is little, so enabling this would cause big-endian data to be written.  However on an ARM machine, the native endianness can be either little or big, and the interpretation of this property could change.</description>
    <value>false</value>
    <kind kindtype="property"/>
    <action type="external"/>
  </simple>
  <simple id="recording_enabled" mode="readwrite" name="recording_enabled" type="boolean">
    <description>When disabled, no data will be written to the specified file.</description>
    <value>true</value>
    <kind kindtype="property"/>
    <action type="external"/>
  </simple>
  <struct id="advanced_properties" mode="readwrite" name="advanced_properties">
    <description>Properties to alter advanced behavior.</description>
    <simple id="advanced_properties::debug_output" mode="readwrite" name="debug_output" type="boolean">
      <description>This will enable additional debug output.</description>
      <value>false</value>
    </simple>
    <simple id="advanced_properties::force_flush" mode="readwrite" name="force_flush" type="boolean">
      <description>When enabled, force a buffer (file) flush on every incoming packet.</description>
      <value>false</value>
    </simple>
    <simple id="advanced_properties::max_file_size" mode="readwrite" name="max_file_size" type="string">
      <description>The maximum allowable size of the specified file.

Allowed Units:
[None = Bytes]
KB (1024 Bytes)
MB (1024^2 Bytes)
GB (1024^3 Bytes)</description>
      <value>UNLIMITED</value>
    </simple>
    <simple id="advanced_properties::max_file_time" mode="readwrite" name="max_file_time" type="long">
      <description>The maximum allowable duration of data to store.  This is calculated based on the sample rate of the incoming data, multiplied by the size of each sample.

-1 means unlimited.</description>
      <value>-1</value>
      <units>seconds</units>
    </simple>
    <simple id="advanced_properties::existing_file" mode="readwrite" name="existing_file" type="string">
      <description>The behavior of the component in the case of the specified URI existing already.  </description>
      <value>RENAME</value>
      <enumerations>
        <enumeration label="APPEND" value="APPEND"/>
        <enumeration label="DROP" value="DROP"/>
        <enumeration label="TRUNCATE" value="TRUNCATE"/>
        <enumeration label="RENAME" value="RENAME"/>
      </enumerations>
    </simple>
    <simple id="advanced_properties::create_destination_dir" mode="readwrite" name="create_destination_dir" type="boolean">
      <description>When enabled, the destination directory specified by the URI will be created if it doesn't already exist, otherwise the data will be dropped.</description>
      <value>true</value>
    </simple>
    <simple id="advanced_properties::enable_metadata_file" mode="readwrite" name="enable_metadata_file" type="boolean">
      <description>When enabled, the SRI data will be written to an XML file.</description>
      <value>false</value>
    </simple>
    <simple id="advanced_properties::reset_on_max_file" name="reset_on_max_file" type="boolean">
      <description>When enabled, remove the file stream when the maximum file size has been reached.</description>
      <value>true</value>
    </simple>
    <simple id="advanced_properties::reset_on_retune" name="reset_on_retune" type="boolean">
      <description>When enabled, remove the file stream when the sample rate, mode, COL_RF, or CHAN_RF has been changed.</description>
      <value>true</value>
    </simple>
    <simple id="advanced_properties::use_hidden_files" mode="readwrite" name="use_hidden_files" type="boolean">
      <description>When enabled, prepend a '.' to the URI basename to hide the file during writing.  This will be removed when the file is finished.</description>
      <value>true</value>
    </simple>
    <simple id="advanced_properties::open_file_extension" name="open_file_extension" type="string">
      <description>An optional extension added to the URI basename of a file being written to presently.</description>
      <value>inProgress</value>
    </simple>
    <simple id="advanced_properties::open_metadata_file_extension" name="open_metadata_file_extension" type="string">
      <description>An optional extension added to the URI basename of a metadata file being written to presently.</description>
      <value>inProgress</value>
    </simple>
    <simple id="advanced_properties::use_tc_prec" name="use_tc_prec" type="boolean">
      <description>The BLUE file format conventionally uses the TC_PREC keyword for increased timecode precision beyond what is capable of being stored as a 64-bit floating-point number. This setting only applies when writing BLUE files (i.e. file_format must be set to BLUEFILE).

When enabled, the BLUE file header &quot;timecode&quot; field will have up to microsecond precision, and precision beyond that is stored in the TC_PREC keyword.

When disabled, the BLUE file header &quot;timecode&quot; field will have as much precision as possible, and the TC_PREC keyword will be absent.

For example, given a timestamp with whole seconds and fractional seconds of ts_wsec=123456789.0 and ts_fsec=0.987654321, respectively:
1) When enabled hdr.timecode=123456789.987654 and TC_PREC=&quot;3.21E-07&quot;.
2) When disabled, hdr.timecode=123456789.987654321 and TC_PREC is absent. However, the 64-bit double timecode only provides between 15-17 significant digits of precision, and some precision will be lost.</description>
      <value>True</value>
    </simple>
    <simple id="advanced_properties::output_filename_case" name="output_filename_case" type="short">
      <description>Letter case of output filename. Allow mixed case (0), force lower case (1), or force upper case (2). Default is to allow mixed case.

Note: Changing this property will take affect on the next new file that is initiated, and will not affect any files that are in progress.</description>
      <value>0</value>
      <units>Case</units>
      <enumerations>
        <enumeration label="mixed" value="0"/>
        <enumeration label="lower" value="1"/>
        <enumeration label="upper" value="2"/>
      </enumerations>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
  <structsequence id="recording_timer" mode="readwrite" name="recording_timer">
    <description>Provides the ability to enable/disable recordings based on a timestamp. This provides only approximate snaps. It starts recording on the packet following the enabled timestamps and quits recording on the first packet following the disabled timestamp. </description>
    <struct id="recording_timer::timer_struct" mode="readwrite" name="timer_struct">
      <description>The structure representing a timer.</description>
      <simple id="recording_timer::recording_enable" mode="readwrite" name="recording_enable" type="boolean">
        <description>Control whether the timestamp dictates recording should begin or end.</description>
        <value>true</value>
      </simple>
      <simple id="recording_timer::use_pkt_timestamp" mode="readwrite" name="use_pkt_timestamp" type="boolean">
        <description>When enabled, use the timestamp receivied from the BULKIO packet.  When disabled, use the timestamp reported by the system.</description>
        <value>false</value>
      </simple>
      <simple id="recording_timer::twsec" mode="readwrite" name="twsec" type="double">
        <description>The whole second part of the timestamp.</description>
        <value>0</value>
      </simple>
      <simple id="recording_timer::tfsec" mode="readwrite" name="tfsec" type="double">
        <description>The fractional second part of the timestamp.</description>
        <value>0</value>
      </simple>
    </struct>
    <configurationkind kindtype="property"/>
  </structsequence>
  <struct id="file_io_message" mode="readwrite">
    <description>The structure representing a file IO message.</description>
    <simple id="file_io_message::file_operation" name="file_operation" type="string">
      <description>The message can indicate either an open or close event.</description>
      <value>OPEN</value>
      <enumerations>
        <enumeration label="OPEN" value="OPEN"/>
        <enumeration label="CLOSE" value="CLOSE"/>
      </enumerations>
    </simple>
    <simple id="file_io_message::stream_id" name="stream_id" type="string">
      <description>The message can indicate a stream to be associated with the event.</description>
    </simple>
    <simple id="file_io_message::filename" name="filename" type="string">
      <description>The message can indicate a filename to be associated with the event.</description>
    </simple>
    <configurationkind kindtype="message"/>
  </struct>
  <struct id="component_status" mode="readonly" name="component_status">
    <simple id="component_status::domain_name" name="domain_name" type="string">
      <description>Name of the domain in which this component exists. &quot;(domainless)&quot; is reported if no domain can be found.</description>
      <value>(domainless)</value>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
</properties>
